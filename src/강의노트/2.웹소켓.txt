[ HTTP ] : 하이퍼텍스트 전송 프로토콜
    - 클라이언트 <---- request / response ----> 서버
    - HTTP 기반의 통신은 요청(request)가 있을경우에만 응답(response)이 가능하다.
    - 무상태( 통신 상태 유지 안함 : 통신할때마다 연결/매핑 한다 )

[ WebSocket ] : 웹소켓
    1. 정의 : ws 프로토콜을 기반으로 클라이언트 와 서버 사이에 *** 지속적인 양방향 *** 연결
    2. 특징 :
        1) 지속적인 양방향 연결( 상태유지 )
        2) 소켓 : 통신의 종착점(엔드포인트 : 통신 주고받는 도착 지점 )
        3) 클라이언트 소켓이 서버 소켓으로 부터 연결 요청
    3. 사용처 : 1) 실시간 통신 : 채팅, 게임  2) 알림  3) 보안  등등
    4. 스프링 웹 서버 소켓 구현
        1) 'websocket' 라이브러리 설치 *build.gradle* 에 추가한다.
            1. " https://start.spring.io/ " 에서 새로운 "websocket" 의존성 검색후
            2. implementation 'org.springframework.boot:spring-boot-starter-websocket'

        2) 서버소켓( 핸들러 ) 클래스
            1. 'ChatHandler' 임의의 서버소켓(핸들러)으로 사용할 클래스 생성
            2. 'extends TextWebSocketHandler' 로 부터 상속받아 웹 소켓의 기능(메소드) 오버라이딩(재구현)
                * extends(상속) : 특정한 클래스로부터 클래스 정보(멤버변수/메소드)를 물려받는 행위
            3. @Component // 스프링 컨테이너(메모리)에 빈(객체) 등록
            4. 물려받은(오버라딩) 주요 메소드
                1) 클라이언트 소켓이 서버소켓으로부터 연결을 성공했을때 실행되는 메소드
                @Override
                public void afterConnectionEstablished(WebSocketSession session) throws Exception { }

                2) 클라이언트 소켓이 서버소켓 과 연결을 끊겼을때 실행되는 메소드
                @Override
                public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception { }

                3) 클라이언트 소켓이 서버소켓 에게 메시지를 보냈을때 실행되는 메소드
                @Override
                protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {   }

        3) 서버소켓( 핸들러 )를 스프링에 등록하기
            @Configuration // 스프링 컨테이너(메모리) 빈(객체) 등록
            @EnableWebSocket // 웹소켓 사용 활성화
            public class WebSocketConfig implements WebSocketConfigurer {

                    @Autowired private 서버웹소켓클래스명 서버웹소켓객체;

                    @Override
                    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
                        registry.addHandler( 서버웹소켓객체 , "ws경로주소정의");
                    }
            }

        4. 클라이언트 JS 웹 소켓 구현
            주의할점 : 브라우저/JS 마다 클라이언트 웹 소켓(**세션저장소**)은 별도의 객체로 사용된다.
            1) 서버 웹소켓 경로 부터 클라이언트 웹소켓 구현
                new WebSocket("ws웹소켓서버주소");
                * WebSocketConfig 클래스 파일에서 정의한 주소를 확인
                * F5(새로고침) 하거나 JS 실행되면 모든 JS의 객체는 초기화 , 즉] 클라이언트소켓 도 초기화

            2) 주요 클라이언트 웹소켓 메소드 오버라이딩
                * event 매개변수는 각 이벤트의 정보가 있는 객체
                2-1 : onopen( event ) : 서버 소켓과 연결이 성공 되었을때
                2-2 : onclose( event ) : 서버 소켓과 연결이 종료 되었을때
                2-3 : onerror( event ) : 서버 소켓과 에러가 발생 되었을때
                2-4 : onmessage( event ) : 서버 소켓으로 부터 메시지를 받았을때

            3) 연동된 서버 소켓에게 메시지 전송
                .send( 메시지 );