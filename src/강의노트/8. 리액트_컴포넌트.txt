[ 컴포넌트 ]
    1. 정의 : 리액트에서 독립적이고 재사용 가능한 *함수*
    2. 특징 : HTML+JS+CSS를 하나의 컴포넌트 구성

[ 컴포넌트 만들기]
    (1) function
    (2) 컴포넌트(함수)명 : 아무거나 하되 default 컴포넌트 파일명 일치
        - 컴포넌트명은 반드시 첫글자를 대문자로 시작 : <input> : 소문자 html , <Input> : 대문자 컴포넌트
    (3) ( props ) : property속성 으로 <컴포넌트 속성=값 속성=값 />
    (4) { } : 중괄호안에서 JS 와 HTML 작성한다.
    (5) return : HTML과 JS가 혼합된 JSX 문법을 사용할 수 있다. JSP(HTML+JAVA) JSX(HTML+JS)
    (6) jsx파일내 export default 함수를 1개만 정의한다.

    // 사용예시1
    export default function Component( props ){
        // ---------> JS 코드 START

        // <--------- JS 코드 END : return 전까지

        // ---------> JSX 코드 START : return 부터는 JSX 문법
        return (<>  </>)
        // <-------- JSX 코드 END
    } // func end

     // 사용예시2
     export default Component = ( props ) => {
        return (<> </> )
     }

[ 컴포넌트 불러오기 ]
    (1) 다른 js(jsx) 파일 일때
        export default 컴포넌트: import 컴포넌트명 from 'jsx파일경로'   ,
        export 컴포넌트: import { 컴포넌트명, 컴포넌트명 } from 'jsx파일경로'

    (2) 같은 js(jsx) 파일 일때
        <컴포넌트명 />

[ JSX ]
    1. 정의 : 컴포넌트 안에서 HTML 과 *비슷한 문법*을 사용할 수 있도록 만든 확장 문법
    2. 주의할점 : 브라우저(크롬)가 해석할 수 없다. 그러므로 리액트의 렌더링이 필요 , create.render( <컴포넌트 /> );
    3. 특징
        1. JSX는 HTML 처럼 보이지만 HTML 과 다르다. << 가상 DOM 사용 >>
            조건1 : 마크업/컴포넌트 close 필수 사용 , 강력한 검사
                <input >    [X]
                <input />   [O]

            조건2 : 반드시 전체를 감싸는 상위 요소(dom) 필수
                <div> </div> 또는 <> </>
                1. return <div> 내용물 </div>
                2. return <> 내용물 </>

            조건3 : 2줄 이상 요소가 되는경우 관례적으로 ( ) 소괄호 묶는다.
                return (<>

                        </>);

        2. JSX 문법 에서 JS표현식을 사용 , 표현식이란 정의/선언/생성 부 불가능하다.
            <div> { JS코드 } </div>

        3. JSX 주석 , HTML주석은 불가능하다. 즉 {}중괄호 안에서 JS주석 사용한다.
            { /* 주석처리 */ }

[ props ]
    1. 정의 : props는 부모 컴포넌트가 자식 컴포넌트 에게 데이터를 전달하는 매개변수
    2. 역할 : 컴포넌트의 재사용, 데이터를 다른 곳으로 내려준다.
    3. 특징 :
        1. 읽기전용( 물려받은 props데이터는 수정이 불가능하다.)
        2. 단방향( 자식이 부모에게 전달이 안된다. )
    4. 사용법
            function 부모컴포넌트( props ){
                return (<>  <자식컴포넌트 속성명1 = {값} 속성명2 = { 값 } /> </>)
            }
        방법1) 부모컴포넌트 로 부터 전달받은 속성명과 값이 props 객체내 전달된다.
            function 자식컴포넌트( props ){ props.속성명1 return (<> </> ) }
        방법2) 부모컴포넌트 로 부터 전달받은 속성명과 값이 props 객체내 전달되고 구문 분해로 각 변수에 저장된다.
            function 자식컴포넌트( { 속성명1 , 속성명2 } ){ return (<> </> ) }

[ HTML(가상DOM) 이벤트 ]
    HTML DOM
        onclick , 순수HTML , 직접 함수
        * onclick = "함수명( )"
    REACT DOM
        onClick , 가상HTML , 함수(참조) 전달
        * onClick = { 함수명 }
        * onClick = { ( e ) => { 함수명( e, 매개변수 ); } }
        * onClick = { ( e ) => { console.log(e); } }





[ HTML(가상DOM) 이벤트 ]
    HTML DOM        REACT DOM
    - onclick       - onClick
    - 순수HTML       - 가상HTML
    - 직접 함수       - 함수 전달
    * onClick = { 함수명 } , onClick = { ( e ) => { 함수명( e , 매개변수 ) } } , onClick = { ( e ) => { console.log( e ); } }



